{"version":3,"sources":["components/Weather.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","city","temp","weather","date","low","high","onDelete","instance","className","onClick","id","Main","instances","dateBuilder","d","day","getDay","getDate","month","getMonth","year","getFullYear","map","name","sys","country","Math","round","main","Date","temp_min","temp_max","App","api","useState","query","setQuery","setWeather","setInstance","error","setError","onChange","e","target","value","onKeyPress","key","a","fetch","res","json","data","cod","console","log","setTimeout","fetchData","type","placeholder","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60c1bb9e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { RiDeleteBinLine } from 'react-icons/ri';\r\n\r\nconst Weather = ({city, temp, weather, date, low, high, onDelete, instance}) => {\r\n    return (\r\n        <div className=\"weather-instance\">\r\n            <span className=\"city\">{city}</span>\r\n            <span className=\"date\">{date}</span>\r\n            <span className=\"temp\">{temp}°C</span>\r\n            <span className=\"weather\">{weather}</span>\r\n            <span className=\"low-high\">{low}°C / {high}°C</span>\r\n\r\n            <button \r\n            className=\"delete\"\r\n            onClick={() => onDelete(instance.id)}\r\n            ><RiDeleteBinLine className=\"delete-icon\"/></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n","import React from 'react'\r\nimport Weather from './Weather'\r\n\r\nconst Main = ({instances, onDelete}) => {\r\n    const dateBuilder = (d) => {\r\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n    \r\n        let day = days[d.getDay()];\r\n        let date = d.getDate();\r\n        let month = months[d.getMonth()];\r\n        let year = d.getFullYear();\r\n    \r\n        return `${day} ${date} ${month} ${year}`\r\n      }\r\n\r\n    return (\r\n        <main className=\"main-container\">\r\n            {instances.map((instance) => (\r\n                <Weather \r\n                key={instance.id} \r\n                city={`${instance.name}, ${instance.sys.country}`} \r\n                temp={Math.round(instance.main.temp)} \r\n                weather={instance.weather[0].main} \r\n                date={dateBuilder(new Date())} \r\n                low={Math.round(instance.main.temp_min)} \r\n                high={Math.round(instance.main.temp_max)}\r\n                onDelete={onDelete}\r\n                instance={instance}\r\n                />\r\n            ))}\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import './sass/App.scss';\r\nimport Main from './components/Main'\r\nimport { useState } from 'react'\r\n\r\nfunction App() {\r\n  const api = {\r\n    key: \"3a4015c59fc01878434227ba79fd42ca\",\r\n    base: \"https://api.openweathermap.org/data/2.5/\"\r\n  }\r\n\r\n  const [query, setQuery] = useState('');\r\n  const [weather, setWeather] = useState({});\r\n  const [instances, setInstance] = useState([]);\r\n  const [error, setError] = useState('');\r\n\r\n  const search = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      const fetchData = async () => {\r\n        const res = await fetch(`${api.base}weather?q=${query}&units=metric&appid=${api.key}`)\r\n        const data = await res.json()\r\n        \r\n        if  (data.cod === \"404\"){\r\n          setError(\r\n          <div className=\"error\"><p>{query} was not found.</p> <p>Please enter another location or check for typos.</p></div>)\r\n          console.log(\"City not found\")\r\n\r\n          setTimeout(() => setError(''), 3000);\r\n        }else{\r\n          setQuery('');\r\n          setWeather(data);\r\n          setInstance([...instances, data]);\r\n        }\r\n      }\r\n      fetchData();\r\n    }\r\n  }\r\n\r\n  const deleteInstance = (id) => {\r\n    setInstance(instances.filter((instance) => instance.id !== id ))\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"header-container\">\r\n        <input\r\n          onChange={e => setQuery(e.target.value)}\r\n          value={query}\r\n          onKeyPress={search}\r\n          type=\"text\"\r\n          placeholder=\"Search for a location...\"\r\n        />\r\n        {error}\r\n      </header>\r\n      {(typeof weather.main != \"undefined\") ? (\r\n      <Main  \r\n        instances={instances}\r\n        onDelete={deleteInstance}\r\n      />\r\n      ) : ('')}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './sass/index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}