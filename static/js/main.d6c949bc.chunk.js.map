{"version":3,"sources":["components/Card.jsx","components/Main.jsx","components/Search.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Card","city","temp","weather","date","low","high","onDelete","instance","className","onClick","id","Main","instances","dateBuilder","d","day","getDay","getDate","month","getMonth","year","getFullYear","length","breakPoints","width","itemsToShow","itemsToScroll","map","name","sys","country","Math","round","main","Date","temp_min","temp_max","Search","api","getInstance","useState","query","setQuery","error","setError","search","e","a","errorTooManyLocations","fetchData","data","undefined","fetch","base","key","res","json","cod","errorLocationNotFound","check","errorLocationAlreadyExists","setTimeout","onChange","target","value","onKeyPress","type","placeholder","App","setInstance","response","previousInstances","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6c949bc.chunk.js","sourcesContent":["import React from 'react'\r\nimport { RiDeleteBinLine } from 'react-icons/ri';\r\n\r\nconst Card = ({city, temp, weather, date, low, high, onDelete, instance}) => {\r\n    return (\r\n        <div className=\"weather-instance\">\r\n            <span className=\"city\">{city}</span>\r\n            <span className=\"date\">{date}</span>\r\n            <span className=\"temp\">{temp}°C</span>\r\n            <span className=\"weather\">{weather}</span>\r\n            <span className=\"low-high\">{low}°C / {high}°C</span>\r\n\r\n            <button \r\n            className=\"delete\"\r\n            onClick={() => onDelete(instance.id)}\r\n            ><RiDeleteBinLine className=\"delete-icon\"/></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from \"react\";\r\nimport Card from \"./Card.jsx\";\r\nimport Carousel from \"react-elastic-carousel\";\r\n\r\nconst Main = ({ instances, onDelete }) => {\r\n\r\n  const dateBuilder = (d) => {\r\n    let months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    let days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`;\r\n  };\r\n\r\n  const breakPoints = [\r\n      {width: 1, itemsToShow: 1, itemsToScroll: 1 },\r\n      {width: 550, itemsToShow: 2, itemsToScroll: 1 },\r\n      {width: 768, itemsToShow: 3, itemsToScroll: 1 },\r\n      {width: 1200, itemsToShow: 5, itemsToScroll: 1 },\r\n  ]\r\n\r\n  return (\r\n    <main className=\"main-container\">\r\n      {instances.length >0 && <Carousel breakPoints={breakPoints}>\r\n        {instances.map((instance) => (\r\n          <Card\r\n            key={instance.id}\r\n            city={`${instance.name}, ${instance.sys.country}`}\r\n            temp={Math.round(instance.main.temp)}\r\n            weather={instance.weather[0].main}\r\n            date={dateBuilder(new Date())}\r\n            low={Math.round(instance.main.temp_min)}\r\n            high={Math.round(instance.main.temp_max)}\r\n            onDelete={onDelete}\r\n            instance={instance}\r\n          />\r\n        ))}\r\n      </Carousel>}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nconst Search = ({api, getInstance, instances}) => {\r\n    const [query, setQuery] = useState('');\r\n    const [error, setError] = useState('');\r\n  \r\n    const search = async (e) => {\r\n      if (instances.length >= 5) {\r\n        errorTooManyLocations();\r\n        return;\r\n      }\r\n      const data = await fetchData();\r\n      setQuery('');\r\n      if (data === undefined){\r\n        return;\r\n      }\r\n      getInstance(data);\r\n    }\r\n    \r\n    const fetchData = async () => {\r\n      const res = await fetch(`${api.base}weather?q=${query}&units=metric&appid=${api.key}`)\r\n      const data = await res.json()\r\n  \r\n      if (data.cod === \"404\") {\r\n        errorLocationNotFound();\r\n        return;\r\n      }\r\n      let check = true;\r\n      instances.map((instance) => {\r\n        if (instance.id === data.id) {\r\n          errorLocationAlreadyExists();\r\n          check = false;\r\n        }\r\n      })\r\n      if (check === true){\r\n        return data;\r\n      }\r\n    }\r\n    \r\n    const errorLocationNotFound = () => {\r\n      setQuery('');\r\n      setError(\r\n        <div className=\"error\"><p>{query} was not found.</p> <p>Please enter another location or check for typos.</p></div>)\r\n        setTimeout(() => setError(''), 3000);\r\n    };\r\n  \r\n    const errorLocationAlreadyExists = () => {\r\n      setQuery('');\r\n      setError(\r\n        <div className=\"error\"><p>{query} is already a location.</p></div>)\r\n      setTimeout(() => setError(''), 3000);\r\n    };\r\n  \r\n    const errorTooManyLocations = () => {\r\n      setQuery('');\r\n      setError(\r\n        <div className=\"error\">Too many locations. Please delete one.</div>)\r\n      setTimeout(() => setError(''), 3000);\r\n    };\r\n\r\n\r\n    return (\r\n        <header className=\"header-container\">\r\n            <input\r\n                onChange={e => setQuery(e.target.value)}\r\n                value={query}\r\n                onKeyPress={(e) => { if (e.key === \"Enter\") { search(e) } }}\r\n                type=\"text\"\r\n                placeholder=\"Search for a location...\"\r\n            />\r\n            {error}\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import './sass/App.scss';\r\nimport Main from './components/Main.jsx'\r\nimport Search from './components/Search.jsx'\r\nimport { useState } from 'react'\r\n\r\n\r\nfunction App() {\r\n  const api = {\r\n    key: \"3a4015c59fc01878434227ba79fd42ca\",\r\n    base: \"https://api.openweathermap.org/data/2.5/\"\r\n  }\r\n\r\n  const [instances, setInstance] = useState([]);\r\n\r\n  const getInstance = (response) => {\r\n    setInstance((previousInstances) =>\r\n    {\r\n      return [...previousInstances, response]\r\n    });\r\n  }\r\n\r\n  const deleteInstance = (id) => {\r\n    setInstance(instances.filter((instance) => instance.id !== id))\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Search \r\n        api={api}\r\n        getInstance={getInstance}\r\n        instances={instances}\r\n        />\r\n      {(instances !== undefined) && (\r\n        <Main\r\n          instances={instances}\r\n          onDelete={deleteInstance}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './sass/index.scss';\r\nimport App from './App.jsx'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}