{"version":3,"sources":["components/Card.jsx","components/Main.jsx","components/Search.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Card","onDelete","instance","className","location","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","temp","weather","min","max","onClick","id","Main","instances","length","breakPoints","width","itemsToShow","itemsToScroll","map","Search","api","getInstance","useState","query","setQuery","error","setError","Location","response","this","name","sys","country","Math","round","main","temp_min","temp_max","search","e","a","errorTooManyLocations","fetchData","data","undefined","fetch","base","key","res","json","cod","errorLocationNotFound","check","errorLocationAlreadyExists","setTimeout","onChange","target","value","onKeyPress","type","placeholder","App","setInstance","console","log","previousInstances","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22478edb.chunk.js","sourcesContent":["import React from 'react'\r\nimport { RiDeleteBinLine } from 'react-icons/ri';\r\n\r\nconst Card = ({onDelete, instance}) => {\r\n    const dateBuilder = (d) => {\r\n        let months = [\r\n          \"January\",\r\n          \"February\",\r\n          \"March\",\r\n          \"April\",\r\n          \"May\",\r\n          \"June\",\r\n          \"July\",\r\n          \"August\",\r\n          \"September\",\r\n          \"October\",\r\n          \"November\",\r\n          \"December\",\r\n        ];\r\n        let days = [\r\n          \"Sunday\",\r\n          \"Monday\",\r\n          \"Tuesday\",\r\n          \"Wednesday\",\r\n          \"Thursday\",\r\n          \"Friday\",\r\n          \"Saturday\",\r\n        ];\r\n    \r\n        let day = days[d.getDay()];\r\n        let date = d.getDate();\r\n        let month = months[d.getMonth()];\r\n        let year = d.getFullYear();\r\n    \r\n        return `${day} ${date} ${month} ${year}`;\r\n      };\r\n\r\n    return (\r\n        <div className=\"weather-instance\">\r\n            <span className=\"city\">{instance.location}</span>\r\n            <span className=\"date\">{dateBuilder(new Date())}</span>\r\n            <span className=\"temp\">{instance.temp}°C</span>\r\n            <span className=\"weather\">{instance.weather}</span>\r\n            <span className=\"low-high\">{instance.min}°C / {instance.max}°C</span>\r\n\r\n            <button \r\n            className=\"delete\"\r\n            onClick={() => onDelete(instance.id)}\r\n            ><RiDeleteBinLine className=\"delete-icon\"/></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from \"react\";\r\nimport Card from \"./Card.jsx\";\r\nimport Carousel from \"react-elastic-carousel\";\r\n\r\nconst Main = ({ instances, onDelete }) => {\r\n\r\n  const breakPoints = [\r\n      {width: 1, itemsToShow: 1, itemsToScroll: 1 },\r\n      {width: 750, itemsToShow: 2, itemsToScroll: 1 },\r\n      {width: 1024, itemsToShow: 3, itemsToScroll: 1 },\r\n      {width: 1200, itemsToShow: 4, itemsToScroll: 1 },\r\n      {width: 1500, itemsToShow: 5, itemsToScroll: 1 },\r\n  ]\r\n\r\n  return (\r\n    <main className=\"main-container\">\r\n      {instances.length >0 && <Carousel breakPoints={breakPoints}>\r\n        {instances.map((instance) => (\r\n          <Card\r\n            key={instance.id}\r\n            onDelete={onDelete}\r\n            instance={instance}\r\n          />\r\n        ))}\r\n      </Carousel>}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nconst Search = ({api, getInstance, instances}) => {\r\n    const [query, setQuery] = useState('');\r\n    const [error, setError] = useState('');\r\n  \r\n    class Location {\r\n      constructor(response){\r\n        this.id = response.id;\r\n        this.location = `${response.name}, ${response.sys.country} `;\r\n        this.temp = Math.round(response.main.temp);\r\n        this.weather = response.weather[0].main;\r\n        this.min = Math.round(response.main.temp_min);\r\n        this.max = Math.round(response.main.temp_max);\r\n  \r\n      }\r\n    }\r\n\r\n    const search = async (e) => {\r\n      if (instances.length >= 5) {\r\n        errorTooManyLocations();\r\n        return;\r\n      }\r\n      const data = await fetchData();\r\n      setQuery('');\r\n      if (data === undefined){\r\n        return;\r\n      }\r\n      let location = new Location(data);\r\n      getInstance(location);\r\n    }\r\n    \r\n    const fetchData = async () => {\r\n      const res = await fetch(`${api.base}weather?q=${query}&units=metric&appid=${api.key}`)\r\n      const data = await res.json()\r\n  \r\n      if (data.cod === \"404\") {\r\n        errorLocationNotFound();\r\n        return;\r\n      }\r\n      let check = true;\r\n      instances.map((instance) => {\r\n        if (instance.id === data.id) {\r\n          errorLocationAlreadyExists();\r\n          check = false;\r\n        }\r\n      })\r\n      if (check === true){\r\n        return data;\r\n      }\r\n    }\r\n    \r\n    const errorLocationNotFound = () => {\r\n      setQuery('');\r\n      setError(\r\n        <div className=\"error\"><p>{query} was not found.</p> <p>Please enter another location or check for typos.</p></div>)\r\n        setTimeout(() => setError(''), 3000);\r\n    };\r\n  \r\n    const errorLocationAlreadyExists = () => {\r\n      setQuery('');\r\n      setError(\r\n        <div className=\"error\"><p>{query} is already a location.</p></div>)\r\n      setTimeout(() => setError(''), 3000);\r\n    };\r\n  \r\n    const errorTooManyLocations = () => {\r\n      setQuery('');\r\n      setError(\r\n        <div className=\"error\">Too many locations. Please delete one.</div>)\r\n      setTimeout(() => setError(''), 3000);\r\n    };\r\n\r\n\r\n    return (\r\n        <header className=\"header-container\">\r\n            <input\r\n                onChange={e => setQuery(e.target.value)}\r\n                value={query}\r\n                onKeyPress={(e) => { if (e.key === \"Enter\") { search(e) } }}\r\n                type=\"text\"\r\n                placeholder=\"Search for a location...\"\r\n            />\r\n            {error}\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import './sass/App.scss';\r\nimport Main from './components/Main.jsx'\r\nimport Search from './components/Search.jsx'\r\nimport { useState } from 'react'\r\n\r\n\r\nfunction App() {\r\n  const api = {\r\n    key: \"3a4015c59fc01878434227ba79fd42ca\",\r\n    base: \"https://api.openweathermap.org/data/2.5/\"\r\n  }\r\n\r\n  const [instances, setInstance] = useState([]);\r\n\r\n  const getInstance = (response) => {\r\n    console.log(response);\r\n    setInstance((previousInstances) =>\r\n    {\r\n      return [...previousInstances, response]\r\n    });\r\n  }\r\n\r\n  const deleteInstance = (id) => {\r\n    setInstance(instances.filter((instance) => instance.id !== id))\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Search \r\n        api={api}\r\n        getInstance={getInstance}\r\n        instances={instances}\r\n        />\r\n      {(instances !== undefined) && (\r\n        <Main\r\n          instances={instances}\r\n          onDelete={deleteInstance}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './sass/index.scss';\r\nimport App from './App.jsx'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}